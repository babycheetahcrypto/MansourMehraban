generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId       String   @unique
  username         String?
  firstName        String?
  lastName         String?
  coins            Float    @default(0)
  level            Int      @default(1)
  exp              Int      @default(0)
  profilePhoto     String?
  clickPower       Int      @default(1)
  energy           Int      @default(2000)
  pphAccumulated   Float    @default(0)
  multiplier       Int      @default(1)
  multiplierEndTime DateTime?
  boosterCredits   Int      @default(1)
  lastBoosterReset DateTime?
  profitPerHour    Float    @default(0)
  selectedCoinImage String  @default("https://hebbkx1anhila5yf.public.blob.vercel-storage.com/Broke%20Cheetah-FBrjrv6G0CRgHFPjLh3I4l3RGMONVS.png")
  walletAddress    String?
  settings         Json?
  dailyReward      DailyReward?
  shopItems        ShopItem[]
  premiumShopItems PremiumShopItem[]
  tasks            Task[]
  trophies         Trophy[]
  unlockedLevels   Int[]
  friendsCoins     Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ShopItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  basePrice Float
  baseProfit Float
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model PremiumShopItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  basePrice Float
  effect    String
  boosterCredits Int?
  tap       Int?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  reward      Float
  maxProgress Int?
  icon        String
  type        String?
  videoLink   String?
  secretCode  String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Trophy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  requirement Float
  prize       Float
  icon        String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model DailyReward {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique @db.ObjectId
  lastClaimed  DateTime?
  streak       Int      @default(0)
  day          Int      @default(1)
  completed    Boolean  @default(false)
}

