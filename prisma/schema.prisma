datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId       String   @unique
  username         String?
  firstName        String?
  lastName         String?
  profilePhoto     String?
  selectedCoinImage String?
  coins            Int      @default(0)
  level            Int      @default(1)
  exp              Int      @default(0)
  unlockedLevels   Int[]    @default([1])
  clickPower       Int      @default(1)
  friendsCoins     Json     @default("{}")
  energy           Int      @default(2000)
  pphAccumulated   Float    @default(0)
  multiplier       Float    @default(1)
  profitPerHour    Float    @default(0)
  boosterCredits   Int      @default(1)
  lastBoosterReset DateTime?
  dailyReward      DailyReward?
  shopItems        ShopItem[]
  premiumShopItems PremiumShopItem[]
  tasks            Task[]
  trophies         Trophy[]
}

model DailyReward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  lastClaimed DateTime?
  streak      Int      @default(0)
  day         Int      @default(1)
  completed   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}

model ShopItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  name       String
  image      String
  basePrice  Int
  baseProfit Int
  level      Int    @default(1)
  user       User   @relation(fields: [userId], references: [id])
}

model PremiumShopItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  name      String
  image     String
  basePrice Int
  effect    String
  user      User    @relation(fields: [userId], references: [id])
}

model Task {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  description String
  reward      Int
  progress    Int     @default(0)
  completed   Boolean @default(false)
  claimed     Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
}

model Trophy {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  name        String
  description String
  requirement Int
  prize       Int
  claimed     Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
}

